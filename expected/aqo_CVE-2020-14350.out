/*
 * Check fix for CVE-2020-14350.
 * See also 7eeb1d986 postgresql commit.
 */
SET client_min_messages = 'warning';
DROP ROLE IF EXISTS regress_hacker;
SET client_min_messages = 'notice';
CREATE ROLE regress_hacker LOGIN;
-- Test 1
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
GRANT CREATE ON SCHEMA public TO regress_hacker;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION format(f text, r regclass, t text)
RETURNS text
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
  RETURN '';
END
$$ LANGUAGE plpgsql RETURNS NULL ON NULL INPUT;
RESET ROLE;
CREATE EXTENSION aqo;
SET aqo.join_threshold = 0;
-- Test result (must be 'off')
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

RESET ROLE;
DROP FUNCTION format(text, regclass, text);
DROP EXTENSION IF EXISTS aqo;
-- Test 2
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_status(hash bigint)
RETURNS TABLE (
  "learn"       BOOL,
  "use aqo"     BOOL,
  "auto tune"   BOOL,
  "fspace hash" bigINT,
  "t_naqo"      TEXT,
  "err_naqo"    TEXT,
  "iters"       BIGINT,
  "t_aqo"       TEXT,
  "err_aqo"     TEXT,
  "iters_aqo"   BIGINT
)
AS $$
BEGIN
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_status" already exists with same argument types
CONTEXT:  SQL statement "CREATE FUNCTION public.aqo_status(hash bigint)
RETURNS TABLE (
	"learn"			BOOL,
	"use aqo"		BOOL,
	"auto tune"		BOOL,
	"fspace hash"	bigINT,
	"t_naqo"		TEXT,
	"err_naqo"		TEXT,
	"iters"			BIGINT,
	"t_aqo"			TEXT,
	"err_aqo"		TEXT,
	"iters_aqo"		BIGINT
)
AS $func$
SELECT	learn_aqo,use_aqo,auto_tuning,fspace_hash,
		to_char(execution_time_without_aqo[n4],'9.99EEEE'),
		to_char(cardinality_error_without_aqo[n2],'9.99EEEE'),
		executions_without_aqo,
		to_char(execution_time_with_aqo[n3],'9.99EEEE'),
		to_char(cardinality_error_with_aqo[n1],'9.99EEEE'),
		executions_with_aqo
FROM public.aqo_queries aq, public.aqo_query_stat aqs,
	(SELECT array_length(n1,1) AS n1, array_length(n2,1) AS n2,
		array_length(n3,1) AS n3, array_length(n4,1) AS n4
	FROM
		(SELECT cardinality_error_with_aqo		AS n1,
				cardinality_error_without_aqo	AS n2,
				execution_time_with_aqo			AS n3,
				execution_time_without_aqo		AS n4
		FROM public.aqo_query_stat aqs WHERE
			aqs.query_hash = $1) AS al) AS q
WHERE (aqs.query_hash = aq.query_hash) AND
	aqs.query_hash = $1;
$func$ LANGUAGE SQL"
extension script file "aqo--1.2.sql", near line 55
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_status(hash bigint)
RETURNS TABLE (
  "learn"       BOOL,
  "use aqo"     BOOL,
  "auto tune"   BOOL,
  "fspace hash" bigINT,
  "t_naqo"      TEXT,
  "err_naqo"    TEXT,
  "iters"       BIGINT,
  "t_aqo"       TEXT,
  "err_aqo"     TEXT,
  "iters_aqo"   BIGINT
)
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_status(42);
 aqo_status 
------------
(0 rows)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_status(bigint);
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Test 3
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_enable_class(hash bigint)
RETURNS VOID
AS $$
BEGIN
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_enable_class" already exists with same argument types
CONTEXT:  SQL statement "CREATE FUNCTION aqo_enable_class(queryid bigint)
RETURNS void
AS '$libdir/aqo', 'aqo_enable_query'
LANGUAGE C STRICT VOLATILE"
extension script file "aqo--1.5--1.6.sql", near line 13
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_enable_class(hash bigint)
RETURNS VOID
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_enable_class(42);
 aqo_enable_class 
------------------
 
(1 row)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_enable_class(bigint);
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Test 4
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_disable_class(hash bigint)
RETURNS VOID
AS $$
BEGIN
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_disable_class" already exists with same argument types
CONTEXT:  SQL statement "CREATE FUNCTION aqo_disable_class(queryid bigint)
RETURNS void
AS '$libdir/aqo', 'aqo_disable_query'
LANGUAGE C STRICT VOLATILE"
extension script file "aqo--1.5--1.6.sql", near line 18
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_disable_class(hash bigint)
RETURNS VOID
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_disable_class(42);
 aqo_disable_class 
-------------------
 
(1 row)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_disable_class(bigint);
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Test 5
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_clear_hist(hash bigint)
RETURNS VOID
AS $$
BEGIN
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_clear_hist" already exists with same argument types
CONTEXT:  SQL statement "CREATE FUNCTION public.aqo_clear_hist(hash bigint)
RETURNS VOID
AS $func$
DELETE FROM public.aqo_data WHERE fspace_hash=$1;
$func$ LANGUAGE SQL"
extension script file "aqo--1.2.sql", near line 109
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_clear_hist(hash bigint)
RETURNS VOID
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_clear_hist(42);
 aqo_clear_hist 
----------------
 
(1 row)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_clear_hist(bigint);
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Test 6
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_drop(hash bigint)
RETURNS VOID
AS $$
BEGIN
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_drop" already exists with same argument types
CONTEXT:  SQL statement "CREATE FUNCTION public.aqo_drop(hash bigint)
RETURNS VOID
AS $func$
DELETE FROM public.aqo_queries aq WHERE (aq.query_hash = $1);
DELETE FROM public.aqo_data ad WHERE (ad.fspace_hash = $1);
DELETE FROM public.aqo_query_stat aq WHERE (aq.query_hash = $1);
DELETE FROM public.aqo_query_texts aq WHERE (aq.query_hash = $1);
$func$ LANGUAGE SQL"
extension script file "aqo--1.2.sql", near line 123
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_drop(hash bigint)
RETURNS VOID
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_drop(42);
 aqo_drop 
----------
 
(1 row)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_drop(bigint);
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Test 7
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_ne_queries()
RETURNS SETOF int
AS $$
BEGIN
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_ne_queries" already exists with same argument types
CONTEXT:  SQL statement "CREATE FUNCTION public.aqo_ne_queries()
RETURNS SETOF int
AS $func$
SELECT query_hash FROM public.aqo_query_stat aqs
	WHERE -1 = ANY (cardinality_error_with_aqo::double precision[]);
$func$ LANGUAGE SQL"
extension script file "aqo--1.2.sql", near line 116
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_ne_queries()
RETURNS SETOF int
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_ne_queries();
 aqo_ne_queries 
----------------
(0 rows)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_ne_queries();
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Test 8
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_migrate_to_1_1_get_pk(rel text)
RETURNS regclass
AS $$
DECLARE
  ret regclass;
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
  SELECT * FROM aqo_migrate_to_1_1_get_pk(rel::regclass) INTO ret;
  RETURN ret;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
CREATE EXTENSION aqo;
-- Test result (must be 'off')
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

RESET ROLE;
DROP FUNCTION aqo_migrate_to_1_1_get_pk(text);
DROP EXTENSION IF EXISTS aqo;
-- Cleanup
RESET ROLE;
DROP OWNED BY regress_hacker CASCADE;
DROP ROLE regress_hacker;
